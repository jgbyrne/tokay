_ = @{_
    '#' Until('\n')
    '/*' Until('*/') '*/"
    _ # this is the "old" _
_}

EOL = [\n;]

Identifier = @{_ [A-Za-z_] [A-Za-z0-9_]* _}

Variable = @{_ [a-z] [a-zA-Z0-9]* _}

Constant = @{_ [A-Z_] [A-Za-z0-9_]* _}

String = @{_
    '"' Until('"', escape='\\') '"'             $2
_}

LightString = @{_
    '\'' Until('\'', escape='\\') '\''          $2
_}

Charset = @{_
    # todo: sub-language for charsets
    '[' Until(']', escape='\\') ']'
_}

Context = @{ '$' { Identifier ; Integer ; '*' } }

# Expressions -----------------------------------------------------------------

Lvalue = @{
    Variable
    Context
}

Rvalue = @{
    Constant
    Lvalue
    Lvalue '++'
    Lvalue '--'
    '++' Lvalue
    '--' Lvalue
}

Literal = @{
    Integer
    Float
    String
    LightString
    'true'
    'false'
    'void'
    'unset'
}

AliasedExpression =  @{
    Expression ':' Expression
    Expression
}

Atom = @{
    Literal
    Rvalue
    '(' @{ Self ',' AliasedExpression ; AliasedExpression } ')'
    Block
}

Unary = @{
    '+' Atom
    '-' Atom
    Atom
}

MulDiv = @{
    MulDiv '*' Unary
    MulDiv '/' Unary
    Unary
}

AddSub = @{
    AddSub '+' MulDiv
    AddSub '-' MulDiv
    MulDiv
}

Expression = @{
    'if' Expression:condition EOL? Expression:then { EOL? 'else' Expression:else ; Empty }
    'accept' Expression?
    'reject'
    'extend' Expression?
    'escape'
    Lvalue '=' Expression
    AddSub
}

# Structure -------------------------------------------------------------------

Parselet = @{
    '@' ScopedBlock
}

Token = @{
    String
    Charset
    Constant
    Parselet
}

TokenWithModifier = @{
    Token '+'     ("mod_pos": $Token)
    Token '?'     ("mod_opt": $Token)
    Token '*'     ("mod_kle": $Token)
    Token '!'     ("mod_expect": $Token)      # mod_expect raises a syntax error when the given token is not matched!
    Token
}

Sequence = @{
    Constant '=' { Literal ; Parselet }
    @{ TokenWithModifier? ; Expression }+
}

Sequences = @{
    Sequences EOL Sequence
    Sequence
    EOL
}

ScopedBlock = @{
    '{' @{
        'Begin' Expression      ("Begin": Expression)
        'End' Expression        ("End": Expression)
        Sequences
    } '}'!
}


Block = @{
    '{' Sequences '}'!
}

Sequences
